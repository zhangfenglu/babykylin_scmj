{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,kBAAU,EAAE,IAAI;AAChB,eAAO,EAAE,IAAI;AACb,sBAAc,EAAE,IAAI;AACpB,iBAAS,EAAE,CAAC;KACf;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAC9C,YAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;AACtE,YAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,YAAI,cAAc,GAAG,SAAjB,cAAc,GAAe;AAC7B,cAAE,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AAC1B,oBAAI,GAAG,EAAE;AACL,sBAAE,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;;AAEzB,wBAAI,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC;AACrC,wBAAI,MAAM,IAAI,IAAI,EAAE;AAChB,0BAAE,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;AAC/B,0BAAE,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE;AAC3C,gCAAI,GAAG,CAAC,OAAO,IAAI,CAAC,EAAE;AAClB,kCAAE,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;AAC/B,kCAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;6BACjC;yBACJ,CAAC,CAAC;qBACN;iBACJ,MACI;AACD,8BAAU,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;iBACpC;aACJ,CAAC,CAAC;SACN,CAAA;;AAED,YAAI,EAAE,GAAG,SAAL,EAAE,CAAa,IAAI,EAAE;AACrB,gBAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AAChC,gBAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;AAC9B,0BAAc,EAAE,CAAC;SACpB,CAAC;AACF,eAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;;AAE7B,YAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,EAAE,YAAY;AACvC,gBAAI,CAAC,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC;AAC/B,gBAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;SAClC,CAAC,CAAC;AACH,YAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;KAClC;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE;AAClB,YAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;AACxB,gBAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC;SACzE;KACJ;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        _reconnect: null,\r\n        _lblTip: null,\r\n        _loading_image: null,\r\n        _lastPing: 0,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this._reconnect = cc.find(\"Canvas/reconnect\");\r\n        this._loading_image = this._reconnect.getChildByName(\"loading_image\");\r\n        var self = this;\r\n\r\n        var fnTestServerOn = function () {\r\n            cc.vv.net.test(function (ret) {\r\n                if (ret) {\r\n                    cc.vv.gameNetMgr.reset();\r\n                    //cc.director.loadScene('hall');\r\n                    var roomId = cc.vv.userMgr.oldRoomId;\r\n                    if (roomId != null) {\r\n                        cc.vv.userMgr.oldRoomId = null;\r\n                        cc.vv.userMgr.enterRoom(roomId, function (ret) {\r\n                            if (ret.errcode != 0) {\r\n                                cc.vv.gameNetMgr.roomId = null;\r\n                                cc.director.loadScene('hall');\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    setTimeout(fnTestServerOn, 3000);\r\n                }\r\n            });\r\n        }\r\n\r\n        var fn = function (data) {\r\n            self.node.off('disconnect', fn);\r\n            self._reconnect.active = true;\r\n            fnTestServerOn();\r\n        };\r\n        console.log(\"adasfdasdfsdf\");\r\n\r\n        this.node.on('login_finished', function () {\r\n            self._reconnect.active = false;\r\n            self.node.on('disconnect', fn);\r\n        });\r\n        this.node.on('disconnect', fn);\r\n    },\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        if (this._reconnect.active) {\r\n            this._loading_image.rotation = this._loading_image.rotation - dt * 45;\r\n        }\r\n    },\r\n});\r\n"
  ]
}